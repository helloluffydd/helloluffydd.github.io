{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_36/","result":{"data":{"markdownRemark":{"html":"<p>邁向進階 JavaScript ：函式程式設計（Functional Programming）</p>\n<!-- more -->\n<h3 id=\"函式程式設計functional-programming\" style=\"position:relative;\"><a href=\"#%E5%87%BD%E5%BC%8F%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88functional-programming\" aria-label=\"函式程式設計functional programming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函式程式設計（Functional Programming）</h3>\n<p>我們知道，一級函式是 JavaScript 的重點特色，讓我們能夠將函式當作參數傳入另一個函式，而這樣的特色，讓 JavaScript 得以函式為核心，去設計各式各樣的程式語法，達到不同的效果與目的，而這個思考與實作的過程就是所謂的<strong>函式程式設計（Functional Programming）</strong>。</p>\n<p>在課程中，講師以範例來說明：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr1<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  arr2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面這個範例中，我們想將陣列 <code class=\"language-text\">arr1</code> 中的每一個數值乘以 <code class=\"language-text\">2</code> 以後傳入 <code class=\"language-text\">arr2</code> 中。</p>\n<p>身為工程師，我們可以思考如何優化這段程式碼？如何讓程式碼更為簡潔？更為彈性？</p>\n<p>其實，我們可以善用<strong>函式</strong>讓程式碼更為<strong>彈性</strong>，只要改動函式的參數或程式屬性，就可以<strong>減少許多重複的工作</strong>，這就是函式程式設計的基本思維。</p>\n<p>我們試著改寫上面這段程式碼，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newArr <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們可以宣告一個函式 <code class=\"language-text\">mapForEach</code> ，並規定傳入兩個參數，第一個 <code class=\"language-text\">array</code> 是<strong>我們想要處理的陣列</strong>，第二個 <code class=\"language-text\">func</code> 是<strong>我們想要針對陣列中每一個值進行的運算方式</strong>。 </p>\n<p>現在，我們只要將 <code class=\"language-text\">arr1</code> 與 <code class=\"language-text\">function(item){return item * 2　;}</code> 分別當作參數 <code class=\"language-text\">array</code> 與 <code class=\"language-text\">func</code> 傳入函式 <code class=\"language-text\">mapForEach</code> 中，執行回傳的結果再賦值給 <code class=\"language-text\">arr2</code> ，這樣的方式與改寫前的範例程式碼，執行的結果是相同的。</p>\n<p>不同的地方在哪？</p>\n<p>不同的地方在於，我們把原本程式碼的執行任務：「將陣列 <code class=\"language-text\">arr1</code> 中的每一個數值乘以 <code class=\"language-text\">2</code> 以後傳入 <code class=\"language-text\">arr2</code> 中」這一整件事情<strong>包裝</strong>成函式 <code class=\"language-text\">mapForEach</code> ，它的功能變成：「將陣列 <code class=\"language-text\">array</code> 中的每一個數值經過 <code class=\"language-text\">func</code> 運算以後 <code class=\"language-text\">return</code>」。</p>\n<p>如此一來，我們<strong>可以自定義</strong>傳入的參數 <code class=\"language-text\">array</code> 和 <code class=\"language-text\">func</code> ，讓函式 <code class=\"language-text\">mapForEach</code> 的彈性與複用性變高了！</p>\n<p>譬如，我想要判斷陣列中的數值是否大於 <code class=\"language-text\">1</code> ，我只要改變傳入 <code class=\"language-text\">func</code> 的參數：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newArr <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>當然，我們也可以把函式存進一個變數後，將該變數當作參數傳入另一個函式，甚至先做一點處理。</p>\n<p>課程中，講師利用 <code class=\"language-text\">bind()</code> 方法，改寫上面這段程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newArr <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">checkPastLimit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">limiter<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> itme <span class=\"token operator\">></span> limiter <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token function\">checkPastLimit</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>透過 <code class=\"language-text\">bind()</code> ，我們可以自由綁定參數 <code class=\"language-text\">limiter</code> 的值。</p>\n<p>如果不使用 <code class=\"language-text\">bind()</code> 呢？有沒有辦法改寫 <code class=\"language-text\">checkPastLimit.bind(this, 2)</code> ，設計一個函式，只要傳入 <code class=\"language-text\">limiter</code> 的值，還能達到同樣的結果？</p>\n<p>先別急著往下看，請試著動手寫寫看！</p>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n<p>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    newArr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> newArr <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 我自己寫的錯誤答案： </span>\n<span class=\"token comment\">// var setLimiter = function(limiter) {</span>\n<span class=\"token comment\">// 我以為 limiter 會被當作參數傳入（但並不會，因為這裡不是執行函式）</span>\n<span class=\"token comment\">//   return function(limiter, item){</span>\n<span class=\"token comment\">//     return item > limiter ;</span>\n<span class=\"token comment\">//   };</span>\n\n<span class=\"token comment\">// 正確解答：</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">setLimiter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">limiter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 創造函式物件</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">limiter<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> item <span class=\"token operator\">></span> limiter <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> limiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token function\">mapForEach</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token function\">setLimiter</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>要特別注意的是，函式 <code class=\"language-text\">setLimiter</code> 中的 <code class=\"language-text\">return function(limiter, item)</code> ，其意義為<strong>表示式</strong>，意思是<strong>創造函式物件</strong> <code class=\"language-text\">function(limiter, item)</code> 後並回傳，並非執行函式 <code class=\"language-text\">function(limiter, item)</code> 。</p>\n<p>所以，函式 <code class=\"language-text\">setLimiter</code> 傳入的參數 <code class=\"language-text\">limiter</code> 並不會作為參數傳入函式 <code class=\"language-text\">function(limiter, item)</code> ，還是要利用 <code class=\"language-text\">bind()</code> 綁定 <code class=\"language-text\">limiter</code> 的值，此時， <code class=\"language-text\">limiter</code> 會根據作用域找到函式 <code class=\"language-text\">setLimiter</code> 傳進來的參數 <code class=\"language-text\">limiter</code> 並取用。</p>\n<p>這個概念在我自己嘗試解答的時候也混淆了，分清楚<strong>創造函式</strong>與<strong>執行函式</strong>，真的很重要！</p>\n<p>最後，講師也提醒我們，在設計函式程式時，<strong>盡量不要改變（Mutate）原始的資料（Data）</strong>，也就是說，<strong>注意傳值與物件傳參考的特性</strong>，在複製資料時，以<strong>深拷貝</strong>或<strong>創造新的值（物件）</strong>來傳遞資料，如 <code class=\"language-text\">[].push()</code> 、 <code class=\"language-text\">Object.assign({}, obj)</code> 等方法。</p>\n<p>動手寫吧！將你的任務包裝成一個一個的函式，設計屬於你的 JavaScript ！</p>\n<hr>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<ul>\n<li>函式程式設計的思維是將任務拆分、打包成一個一個的函式（與變數），透過傳入參數的方式，減少重複撰寫程式碼，提升函式的彈性與複用性。</li>\n<li>釐清創造函式與執行函式的時機，有利於函式程式設計，瞭解函式作用域、範圍鍊與閉包的原理。</li>\n<li>設計函式程式時，盡量不要改變（Mutate）原始的資料（Data），注意物件傳參考的特性，以深拷貝（請見參考資料文章）或創造新物件的方式來傳遞資料。</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h3>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 4-51</li>\n<li><a href=\"https://larry850806.github.io/2016/09/20/shallow-vs-deep-copy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[Javascript] 關於 JS 中的淺拷貝和深拷貝</a></li>\n</ol>","excerpt":"邁向進階 JavaScript ：函式程式設計（Functional Programming）","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_36/#%E5%87%BD%E5%BC%8F%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88functional-programming\">函式程式設計（Functional Programming）</a></li>\n<li><a href=\"/weird-JavaScript_36/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_36/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_36/"},"frontmatter":{"title":"Wierd JavaScript 36：函式程式設計（一）","date":"2019-09-04","update":"0001-01-01","tags":["JavaScript","Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_36/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-09-04"}},"staticQueryHashes":["2027115977"]}