{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_34/","result":{"data":{"markdownRemark":{"html":"<p>如果你曾經使用過 jQuery 、 <code class=\"language-text\">setTimeout</code> 等 Callback Function，其實你已經使用過閉包的概念了。</p>\n<!-- more -->\n<h3 id=\"閉包與回呼\" style=\"position:relative;\"><a href=\"#%E9%96%89%E5%8C%85%E8%88%87%E5%9B%9E%E5%91%BC\" aria-label=\"閉包與回呼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>閉包與回呼</h3>\n<p>以 <code class=\"language-text\">setTimeout</code> 這段程式碼作為範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHiLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hi!'</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHiLater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>這段程式碼的執行結果為 <strong>「3 秒鐘後印出字串 Hi!」</strong>。</p>\n<p>你有想過為什麼 3 秒後，回呼函式 <code class=\"language-text\">function(){console.log(greeting) ;}</code> ，為什麼能夠取用到外部詞彙環境的 <code class=\"language-text\">greeting</code> 嗎？明明函式 <code class=\"language-text\">sayHiLater()</code> 執行環境早就已經消滅。</p>\n<p>這是因為閉包的機制會將 <code class=\"language-text\">greeting</code> 的值 <code class=\"language-text\">'Hi!'</code> 儲存在函式 <code class=\"language-text\">sayHiLater</code> 專屬的記憶體中，即便執行環境消滅、執行堆疊消失後，回呼函式在詞彙環境中仍然能夠取用到自由變數 <code class=\"language-text\">greeting</code> 的值 <code class=\"language-text\">'Hi!'</code> 。</p>\n<p>我們在很遙遠的 05 篇中稍微提過<strong>回呼（Callback）</strong>這個概念，當時和<strong>非同步</strong>的概念綁在一起講。而這裡回呼函式 <code class=\"language-text\">function(){console.log(greeting) ;}</code> 同樣是<strong>非同步回呼函式</strong>，指的是<strong>非同步事件中，當執行堆疊為空以後，檢視事件佇列，回頭執行的函式</strong>。</p>\n<p>而 <code class=\"language-text\">function(){console.log(greeting) ;}</code> 之所以匿名，是因為用了<strong>一級函式</strong>的概念，直接創造函式並丟入 <code class=\"language-text\">setTimeout</code> 中。</p>\n<p>所以，仔細檢視這段程式碼的執行流程，應是這樣子的：</p>\n<ol>\n<li>JS 引擎建立全域執行環境、 <code class=\"language-text\">window</code> 和 <code class=\"language-text\">this</code> 。</li>\n<li>Creation &#x26; Hoisting : funciton <code class=\"language-text\">sayHiLater</code> 。</li>\n<li><code class=\"language-text\">sayHiLater()</code>，建立函式 <code class=\"language-text\">sayHiLater</code> 的函式執行環境，並執行程式內容。</li>\n<li><code class=\"language-text\">var greeting = 'Hi!'</code> ，宣告區域變數 <code class=\"language-text\">greeting</code> ，賦值為 <code class=\"language-text\">'Hi!'</code> 。</li>\n<li><code class=\"language-text\">setTimeout(function(){console.log(greeting)}, 3000)</code>，<strong>創造</strong>匿名（非同步回呼）函式 <code class=\"language-text\">function(){console.log(greeting)</code> ，並將 <code class=\"language-text\">setTimeout</code> 放進<strong>事件佇列</strong>，等到<strong>執行堆疊為空</strong>時再執行。 </li>\n<li>函式 <code class=\"language-text\">sayHiLater</code> 的程式內容結束，消滅其函式執行環境（但其記憶體空間不會被消滅）。</li>\n<li>全域執行環境結束，執行堆疊為空，檢視事件佇列裡的非同步事件。</li>\n<li>執行 <code class=\"language-text\">setTimeout</code> ，倒數 3 秒（3000 豪秒），計時開始。</li>\n<li>3 秒後，倒數完畢，執行回呼函式 <code class=\"language-text\">function(){console.log(greeting)</code> ，印出字串 <code class=\"language-text\">Hi!</code>。</li>\n</ol>\n<hr>\n<h3 id=\"回呼函式callback-function\" style=\"position:relative;\"><a href=\"#%E5%9B%9E%E5%91%BC%E5%87%BD%E5%BC%8Fcallback-function\" aria-label=\"回呼函式callback function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>回呼函式（Callback Function）</h3>\n<p>{% colorquote warning %}\nA function you give to another function, to be run when the other function is finished.\nThe function you called(invoked), 'calls back' by calling the function you gave it when finished.\n{% endcolorquote %}</p>\n<p>理解回呼函式，可以舉 A 函式與 B 函式來說明：我們在 A 函式中創造 B 函式，接著執行 A 函式，等到 A 函式執行結束後，才回頭呼叫 B 函式，此時 B 函式就是所謂的回呼函式。</p>\n<p>簡言之，<strong>回頭呼叫的函式，即回呼函式</strong>（其所在的外部執行環境可能已經消滅）。</p>\n<p>回呼函式也可以想成：<strong>將 B 函式當作 A 函式的參數傳入，並在 A 函式中呼叫 B 函式</strong>。</p>\n<p>從非同步事件或 DOM 監聽事件的角度來看，回呼函式也是指<strong>那些滿足特定條件才會被動觸發的函式</strong>，如上例 <code class=\"language-text\">setTimeout</code> 或 Click 事件。</p>\n<p>課程中，講師用下面這個例子來解釋回呼函式：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">tellMeWhenDone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function tellMeWhenDone is done!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 執行回呼函式</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 創造一個匿名函式作為參數傳入函式 tellMeWhenDone</span>\n<span class=\"token function\">tellMeWhenDone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Callback function is done!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>稍加改寫講師舉的例子，想一想，下面的回呼函式會印出哪一個名字？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Fei'</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tellMeWhenDone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Bai'</span> <span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function tellMeWhenDone is done!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">tellMeWhenDone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<ul>\n<li>回呼函式，即回頭呼叫執行的函式（其所在的外部執行環境可能已經消滅）。</li>\n<li>回呼函式，也可以想成：將 B 函式當作 A 函式的參數傳入，並在 A 函式中呼叫 B 函式，則 B 函式為回呼函式。</li>\n<li>回呼函式亦指那些滿足特定條件才會被動觸發的函式。</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h3>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 4-49</li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10192739\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">重新認識 JavaScript: Day 18 Callback Function 與 IIFE</a></li>\n</ol>","excerpt":"如果你曾經使用過 jQuery 、  等 Callback Function，其實你已經使用過閉包的概念了。","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_34/#%E9%96%89%E5%8C%85%E8%88%87%E5%9B%9E%E5%91%BC\">閉包與回呼</a></li>\n<li><a href=\"/weird-JavaScript_34/#%E5%9B%9E%E5%91%BC%E5%87%BD%E5%BC%8Fcallback-function\">回呼函式（Callback Function）</a></li>\n<li><a href=\"/weird-JavaScript_34/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_34/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_34/"},"frontmatter":{"title":"Wierd JavaScript 34：閉包與回呼","date":"2019-08-29","update":"0001-01-01","tags":["JavaScript","Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_34/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-29"}},"staticQueryHashes":["2027115977"]}