{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_04/","result":{"data":{"markdownRemark":{"html":"<p>我們之前提過： JavaScript 的執行環境<strong>不只包含你寫的 Code</strong>，因為它必須經過編譯器轉換。</p>\n<p>所以，JavaScript 的執行脈絡到底包含哪些事情是我們不知道的？</p>\n<p>其中，最重要的就是 <strong>Creation</strong> 與 <strong>Hoisting</strong> 。</p>\n<!-- more -->\n<p>事實上，在你寫的 JavaScript 被執行之前，編譯器會<strong>先偷偷幫你</strong>做好兩件事情：</p>\n<ol>\n<li>創造階段（Creation）</li>\n<li>提升階段（Hoisting）</li>\n</ol>\n<h2 id=\"creation創造\" style=\"position:relative;\"><a href=\"#creation%E5%89%B5%E9%80%A0\" aria-label=\"creation創造 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creation（創造）</h2>\n<hr>\n<p>首先， Creation 階段指的是<strong>建立全域執行環境</strong>、<strong>this</strong>以及<strong>最外部環境</strong>。</p>\n<p>在上一篇中我們有說明，在環域環境中：<code class=\"language-text\">全域執行環境 = this = 外部環境</code>。</p>\n<h2 id=\"hoisting提升\" style=\"position:relative;\"><a href=\"#hoisting%E6%8F%90%E5%8D%87\" aria-label=\"hoisting提升 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoisting（提升）</h2>\n<hr>\n<p>Creation 階段後接著進行 Hoisting 階段：<strong>JavaScript 引擎會先幫你宣告 <code class=\"language-text\">變數</code> 與 <code class=\"language-text\">函式</code></strong> ，其中，<strong>變數會先被定義為 <code class=\"language-text\">undefined</code></strong> ，等到執行時才會真正賦值。</p>\n<p>直接看程式碼比較好理解：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Variable would be hoisted in JS.'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function would be hoisted in JS.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面這段程式碼執行後會依序出現：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">Variable would be hoisted in JS.\nFunction would be hoisted in JS.</code></pre></div>\n<p>這個結果很直觀，但如果我們稍微調動一下程式碼順序：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Variable would be hoisted in JS.'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function would be hoisted in JS.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>此時，執行結果會依序出現：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">undefined\nFunction would be hoisted in JS.</code></pre></div>\n<p><span style=\"font-size: 36px\">OMG !! WHY ???</span></p>\n<p>為什麼此時 <code class=\"language-text\">a</code> 變成 <code class=\"language-text\">undefined</code> ，而 function <code class=\"language-text\">b</code> 依然可以執行？</p>\n<p>因為，在 JavaScript 編譯器眼中，這段程式碼其實長這樣：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// var = a ;  JS 偷偷先幫我們宣告變數 a 為 undefined，但它不會告訴我們，所以我們看不到這段。（第 1 行）</span>\n<span class=\"token comment\">// JS 偷偷先幫我們宣告函式，但它不會告訴我們，所以我們看不到這段。（第 2 ~ 5 行）</span>\n<span class=\"token comment\">// function b(){</span>\n<span class=\"token comment\">//  console.log('Function would be hoisted in JS.') ;</span>\n<span class=\"token comment\">//} </span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined </span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Function would be hoisted in JS.</span>\n\na <span class=\"token operator\">=</span> <span class=\"token string\">'Variable would be hoisted in JS.'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function would be hoisted in JS.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>JS 編譯器會先宣告全域執行環境裡的 Variables 與 Functions ，並儲存進電腦的記憶體中，供後續執行使用。<strong>先宣告變數與函式並存進電腦記憶體這個動作，就是 Hoisting</strong>。</p>\n<p>不少網路上對 Hoisting 的解釋是：編譯器會將變數宣告與函式宣告「挪移」到最上方。但是。這樣的說法並不正確。</p>\n<p>更精確的說法是：JS 引擎在執行程式碼前，會<strong>先將整個（JS檔案裡的）程式碼掃過一遍</strong>，並且<strong>只抓變數宣告和函式宣告</strong>出來，逐一存入電腦記憶體，供後續真正執行時使用。</p>\n<p>比喻成實際狀況，就像是：小飛今天想做提拉米蘇，他得先看一次食譜（JS檔案），需要準備哪些材料（變數）？有什麼方法（函式）？腦中有個概念（存進記憶體）後，才真正開始照著食譜動手做。</p>\n<p>所以，<strong>實際上 Code 的位置並沒有改變</strong>，只是 JS 編譯器進行 Hoisting 後，讓我們以為程式碼位置有所變動。如上面那一段程式碼呈現的。</p>\n<p>特別要注意的是，JS 編譯器只會對<strong>變數宣告</strong>與<strong>函式宣告（Function Declaration）</strong>進行 Hoisting ，如果是以函式表達式（Function Expressions）將函式賦予變數，那麼就必須等到 JS 真正開始執行後才能呼叫該函式。如下面這段程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>funcDeclaration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>funcExpressions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">funcExpressions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined is not a function </span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function Declaration would be hoisted in JS.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">funcExpressions</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function Expressions can not be hoisted in JS.'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">funcDeclaration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Function Declaration would be hoisted in JS.</span>\n<span class=\"token function\">funcExpressions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Function Expressions can not be hoisted in JS.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>funcExpressions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// ƒ (){ console.log(...) }</span></code></pre></div>\n<h2 id=\"undefined\" style=\"position:relative;\"><a href=\"#undefined\" aria-label=\"undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>undefined</h2>\n<hr>\n<p>JS 編譯器進行 Hoisting 時，<strong>如果該變數還沒有被賦予值（Value）就直接被取用，JS 就會先賦予該變數 <code class=\"language-text\">undefined</code> 這個值</strong>。也就是前面所舉例的這段程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// a 尚未被賦予值就被 console.log()，所以 JS 先賦予 a 為 undefined 值</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Variable would be hoisted in JS.'</span> <span class=\"token punctuation\">;</span>　<span class=\"token comment\">// a 被賦予一個字串 'Variable would be hoisted in JS.'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Function would be hoisted in JS.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Variable would be hoisted in JS.</span></code></pre></div>\n<p>之前我們曾經介紹過， <code class=\"language-text\">undefined</code> 屬於 JS 六種基本型別中的一種「值」（Value），意思是：<strong>「該變數存在於 JS 中，且已經被宣告，但尚未被賦予值」</strong>。儘管如此， <code class=\"language-text\">undefined</code> 本身還是一種值...我真搞不懂 JS 呀！</p>\n<p>要注意的是，如果某變數<strong>連宣告都還沒宣告過</strong>，那麼 JS 會判定該變數為 <code class=\"language-text\">is not defined</code>，意思是：<strong>「該變數不存在於 JS 中（因為你沒有宣告過它）」</strong>。 </p>\n<p>用程式碼比較如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// b is not defined</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<p>另一個容易與 <code class=\"language-text\">undefined</code> 搞混的值，叫做 <code class=\"language-text\">null</code>，這裡簡單區別兩者。</p>\n<p><code class=\"language-text\">null</code> 也是 JS 六種基本型別的一種「值」，它的意義是：<strong>「空值」，代表這個變數已經宣告，且可能曾經有值，但現在沒有</strong>。</p>\n<p><strong>小飛：「那 <code class=\"language-text\">null</code> 等於 <code class=\"language-text\">0</code> 嗎？」</strong></p>\n<p>你可以試試看這段程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>　 <span class=\"token comment\">// false </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>　 <span class=\"token comment\">// true .... ˊ&lt;_ˋ????????</span></code></pre></div>\n<p>關於 <code class=\"language-text\">null</code> 的詳細介紹與型別比較，就等之後有機會再談囉！</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<hr>\n<ul>\n<li>創造提升（Creation &#x26; Hoisting）指的是：在 JS 真正執行你寫的 Code 之前， JS 引擎會先跑過整個全域執行環境，並將 <code class=\"language-text\">變數宣告</code> 與 <code class=\"language-text\">函式宣告</code> 抓出來存進電腦記憶體，供後續真正執行時使用。</li>\n<li><code class=\"language-text\">undefined</code> 屬於 JS 基本型別的其中一種「值」（Value），意思是：「該變數存在於 JS 中，且已經被宣告，但尚未被賦予值」。</li>\n</ul>\n<h2 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h2>\n<hr>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 2-10 、 2-11</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN：Hoisting</a></li>\n</ol>","excerpt":"我們之前提過： JavaScript 的執行環境不只包含你寫的 Code，因為它必須經過編譯器轉換。 所以，JavaScript 的執行脈絡到底包含哪些事情是我們不知道的？ 其中，最重要的就是 Creation 與 Hoisting 。","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_04/#creation%E5%89%B5%E9%80%A0\">Creation（創造）</a></li>\n<li><a href=\"/weird-JavaScript_04/#hoisting%E6%8F%90%E5%8D%87\">Hoisting（提升）</a></li>\n<li><a href=\"/weird-JavaScript_04/#undefined\">undefined</a></li>\n<li><a href=\"/weird-JavaScript_04/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_04/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_04/"},"frontmatter":{"title":"Wierd JavaScript - 04：創造、提升與 undefined","date":"2019-08-06","update":"0001-01-01","tags":["Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_04/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript - 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript - 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript - 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript - 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript - 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript - 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript - 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript - 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript - 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript - 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript - 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript - 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript - 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript - 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript - 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript - 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript - 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript - 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript - 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript - 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript - 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript - 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript - 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript - 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript - 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript - 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript - 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript - 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript - 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript - 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript - 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript - 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript - 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript - 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript - 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript - 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript - 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript - 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript - 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript - 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-06"}},"staticQueryHashes":["2027115977"]}