{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","useCallback","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","includes","id","className","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","bf","aDate","Date","update","date","bDate","throttleScrollHandler","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","expendPostList","list","mapToList","map","excerpt","slug","fields","tags","lastUpdate","Number","split","mapTag","tag","key","to","useEffect","slice","addEventListener","removeEventListener"],"mappings":"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","file":"component---src-pages-search-tsx-5fc2b723dddc2c99fa41.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts = useCallback(\n    posts.filter((post: any) => {\n      const { node } = post;\n      const { frontmatter, rawMarkdownBody } = node;\n      const { title } = frontmatter;\n      const lowerValue = value.toLocaleLowerCase();\n\n      if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)) return true;\n\n      return title.toLocaleLowerCase().includes(lowerValue);\n    }),\n    [value, isTitleOnly]\n  );\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            tags\n            update(formatString: \"YYYY-MM-DD\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const {\n        node: {\n          excerpt,\n          fields: { slug },\n          frontmatter: { date, update, title, tags },\n        },\n      } = post;\n      // slug would be creaged from the file name like /weird-JavaScript-01/\n      let lastUpdate = update;\n      if (Number(lastUpdate.split('-')[1]) === 1) lastUpdate = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {lastUpdate && <span className=\"update\">&nbsp;{`(Updated: ${lastUpdate})`}</span>}\n              </div>\n              {tags.length && tags[0] !== 'undefined' && <span className=\"info-dot\">Â·</span>}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n"],"sourceRoot":""}