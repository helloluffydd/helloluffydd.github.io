{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_17/","result":{"data":{"markdownRemark":{"html":"<p>當我們想要用相同的變數名稱來代指相似的資料，可以利用物件來建立偽裝的命名空間，避免資料被覆寫。</p>\n<!-- more -->\n<h3 id=\"命名空間namespace\" style=\"position:relative;\"><a href=\"#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93namespace\" aria-label=\"命名空間namespace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>命名空間（Namespace）</h3>\n<p>{% colorquote warning %}\nA container for variables and functions.\nTypically to keep variables and functions with the same name seperate.\n{% endcolorquote %}</p>\n<p>命名空間指的是一個程式語言中<strong>儲存變數與函式名稱的容器</strong>，它的功用在於分離相同名稱的變數與函式。</p>\n<p>然而， <strong>JavaScript 沒有 Namespace</strong> 這項功能。因此，當我們想要用同一個變數名稱來指涉相似的資料，後者所定義的值，往往會覆蓋掉前面所定義的值。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> greet <span class=\"token operator\">=</span> <span class=\"token string\">'Hello!'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> greet <span class=\"token operator\">=</span> <span class=\"token string\">'Hola!'</span>  <span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hola!</span></code></pre></div>\n<p>解決這樣的方法就是，借助物件的特性，<strong>假裝創造各自獨立的命名空間</strong>。</p>\n<hr>\n<h3 id=\"偽裝命名空間\" style=\"position:relative;\"><a href=\"#%E5%81%BD%E8%A3%9D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93\" aria-label=\"偽裝命名空間 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>偽裝命名空間</h3>\n<p>利用物件實字 <code class=\"language-text\">{}</code> 建立新物件，並將相同變數分別儲存進不同的物件中。</p>\n<p>此時，即便我們擁有兩個相同的變數名稱，但因為分屬不同物件，兩者都會被存進電腦記憶體，各自獨立存在，不會被覆寫。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> greetEng <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> greetSpn <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span>\ngreetEng<span class=\"token punctuation\">.</span>greet <span class=\"token operator\">=</span> <span class=\"token string\">'Hello!'</span> <span class=\"token punctuation\">;</span>\ngreetSpn<span class=\"token punctuation\">.</span>greet <span class=\"token operator\">=</span> <span class=\"token string\">'Hola!'</span>  <span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greetEng<span class=\"token punctuation\">.</span>greet<span class=\"token punctuation\">,</span>greetSpn<span class=\"token punctuation\">.</span>greet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello! Hola!</span></code></pre></div>\n<p>注意！如果想在物件中建立一個新的物件，必須<strong>先宣告（初始化）物件</strong>，才能將變數或函數存進去，否則 JS 會因為找不到該物件，而將物件判定為 <code class=\"language-text\">undefined</code> ，以致取用運算子失效。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> greetEng <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span>\n  greetEng<span class=\"token punctuation\">.</span>greet <span class=\"token operator\">=</span> <span class=\"token string\">'Hello!'</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// greetEng.say = {} ; 先宣告物件就可以執行</span>\n  greetEng<span class=\"token punctuation\">.</span>say<span class=\"token punctuation\">.</span>morning <span class=\"token operator\">=</span> <span class=\"token string\">'Good morning!'</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// cannot set property of undefined </span></code></pre></div>\n<hr>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<ul>\n<li>命名空間指的是一個程式語言中儲存變數與函式名稱的容器，但 JavaScript 並沒有這項功能。</li>\n<li>在 JS 中，當我們想要用同一個變數名稱來指涉相似的資料，可以利用物件來偽裝命名空間。</li>\n<li>必須先宣告（初始化）物件後，才能開始在物件中新增屬性或方法。</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h3>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 4-32</li>\n</ol>","excerpt":"當我們想要用相同的變數名稱來代指相似的資料，可以利用物件來建立偽裝的命名空間，避免資料被覆寫。","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_17/#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93namespace\">命名空間（Namespace）</a></li>\n<li><a href=\"/weird-JavaScript_17/#%E5%81%BD%E8%A3%9D%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93\">偽裝命名空間</a></li>\n<li><a href=\"/weird-JavaScript_17/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_17/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_17/"},"frontmatter":{"title":"Wierd JavaScript 17：偽裝命名空間","date":"2019-08-14","update":"0001-01-01","tags":["JavaScript","Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_17/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-14"}},"staticQueryHashes":["2027115977"]}