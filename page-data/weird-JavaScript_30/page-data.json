{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_30/","result":{"data":{"markdownRemark":{"html":"<p>什麼情況下會用到 IIFEs ？</p>\n<!-- more -->\n<h2 id=\"iifes與非同步回呼\" style=\"position:relative;\"><a href=\"#iifes%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%9B%9E%E5%91%BC\" aria-label=\"iifes與非同步回呼 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IIFEs與非同步回呼</h2>\n<hr>\n<p>立即執行函式表達式（IIFEs），指的是我們利用表達式創造函式後，立即呼叫，執行運算，用完就丟。</p>\n<p>函式立即呼叫後，JS 會建立屬於它的執行環境，加入執行堆疊，並接著執行程式碼。</p>\n<p>函式運算後回傳值（如果有 <code class=\"language-text\">return</code> 的話），消滅執行環境，離開執行堆疊，該 IIFEs 的生命也就結束了，因為只用一次。</p>\n<p>IIFEs 用完就丟的特性，讓我們能夠<strong>立即執行非同步回呼</strong>，避免 JS 引擎將它們放進事件佇列，等到最後才逐一執行。</p>\n<p>先前我們舉過 <code class=\"language-text\">setTimeout</code> 的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'這是第 '</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> 次執行。</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在這樣的狀況下，JS 引擎會等到執行堆疊為空時，才執行 <code class=\"language-text\">setTimeout</code> 的回呼函式，此時 <code class=\"language-text\">i = 11</code> ，執行結果將會是：</p>\n<blockquote>\n<p>(10) 這是第 11 次執行。</p>\n</blockquote>\n<p>我們可以利用 IIFEs 將 <code class=\"language-text\">setTimeout</code> 包起來，並傳入 <code class=\"language-text\">i</code> ，每跑一次迴圈，就立即執行回呼函式，達到我們預期的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'這是第 '</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> 次執行。</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>這是第 1 次執行。\n這是第 2 次執行。\n...\n這是第 10 次執行。</p>\n</blockquote>\n<h2 id=\"安全程式碼safe-code\" style=\"position:relative;\"><a href=\"#%E5%AE%89%E5%85%A8%E7%A8%8B%E5%BC%8F%E7%A2%BCsafe-code\" aria-label=\"安全程式碼safe code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安全程式碼（Safe Code）</h2>\n<hr>\n<p>IIFEs 能夠立即呼叫函式，創造新的執行環境，執行完後隨即消滅。</p>\n<p>這樣的特性可以幫助我們<strong>避免污染全域</strong>，<strong>讓只具備功能性的變數隨著執行環境生滅</strong>，而這樣的作法就是所謂<strong>安全程式碼</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// is not defined</span></code></pre></div>\n<p>換句話說，我們可以將所欲處理的事情包進 IIFEs 中執行，只 <code class=\"language-text\">return</code> 需要的值，其他沒用的值就不要回傳。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// greeting 只是具備功能性的變數，隨著函式執行環境生滅。</span>\n  <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> </code></pre></div>\n<p>如果我們想要取用全域物件，可以利用物件傳參考的特性，將 <code class=\"language-text\">window</code> 傳入 IIFEs 中，或者直接取用、修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \n  global<span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hola'</span> <span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// greeting = 'Hola' ; 直接取用，修改全域變數。</span>\n  <span class=\"token comment\">// var greeting = 'Bonjour' ;  宣告為區域變數，並直接取用。</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hola</span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<hr>\n<ul>\n<li>IIFEs 能夠立即呼叫函式，創造新的執行環境，執行完後隨即消滅，這樣的特性可以幫助我們避免污染全域，讓只具備功能性的變數隨著執行環境生滅，而這樣的作法就是所謂的安全程式碼。</li>\n</ul>\n<h2 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h2>\n<hr>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 4-45</li>\n</ol>","excerpt":"什麼情況下會用到 IIFEs ？","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_30/#iifes%E8%88%87%E9%9D%9E%E5%90%8C%E6%AD%A5%E5%9B%9E%E5%91%BC\">IIFEs與非同步回呼</a></li>\n<li><a href=\"/weird-JavaScript_30/#%E5%AE%89%E5%85%A8%E7%A8%8B%E5%BC%8F%E7%A2%BCsafe-code\">安全程式碼（Safe Code）</a></li>\n<li><a href=\"/weird-JavaScript_30/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_30/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_30/"},"frontmatter":{"title":"Wierd JavaScript - 30：IIFEs 與安全程式碼","date":"2019-08-24","update":"0001-01-01","tags":["Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_30/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript - 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript - 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript - 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript - 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript - 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript - 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript - 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript - 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript - 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript - 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript - 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript - 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript - 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript - 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript - 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript - 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript - 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript - 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript - 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript - 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript - 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript - 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript - 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript - 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript - 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript - 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript - 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript - 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript - 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript - 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript - 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript - 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript - 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript - 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript - 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript - 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript - 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript - 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript - 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript - 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-24"}},"staticQueryHashes":["2027115977"]}