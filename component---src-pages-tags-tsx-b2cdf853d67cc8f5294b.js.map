{"version":3,"sources":["webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["PostList","props","posts","useState","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","node","frontmatter","bf","aDate","Date","update","includes","date","bDate","throttleScrollHandler","useCallback","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","expendPostList","list","mapToList","map","post","excerpt","slug","fields","title","tags","lastUpdate","Number","split","mapTag","tag","key","className","to","useEffect","slice","addEventListener","removeEventListener","Tags","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","getPostList","filter","edges","location","hash","large","id"],"mappings":"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","file":"component---src-pages-tags-tsx-b2cdf853d67cc8f5294b.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\ninterface PostListProps {\n  posts: any[];\n}\n\nconst PostList = (props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\n  const sortedPosts = useMemo(() => {\n    posts.sort((a: any, b: any) => {\n      const af = a.node.frontmatter;\n      const bf = b.node.frontmatter;\n\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\n\n      if (aDate < bDate) return 1;\n      if (aDate > bDate) return -1;\n      return 0;\n    });\n    return posts;\n  }, [posts]);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= sortedPosts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [sortedPosts]\n  );\n\n  const expendPostList = useCallback((list: any) => {\n    const mapToList = list.map((post: any) => {\n      const {\n        node: {\n          excerpt,\n          fields: { slug },\n          frontmatter: { date, update, title, tags },\n        },\n      } = post;\n      // slug would be creaged from the file name like /weird-JavaScript-01/\n      let lastUpdate = update;\n      if (Number(lastUpdate.split('-')[1]) === 1) lastUpdate = null;\n\n      const mapTag = tags.map((tag: string) => {\n        if (tag === 'undefined') return;\n\n        return (\n          <div key={`${slug}-${tag}`} className=\"tag\">\n            <span>\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\n            </span>\n          </div>\n        );\n      });\n\n      return (\n        <li key={slug} className={`post`}>\n          <article>\n            <h2 className=\"title\">\n              <Link to={slug}>{title}</Link>\n            </h2>\n            <div className=\"info\">\n              <div className=\"date-wrap\">\n                <span className=\"date\">{date}</span>\n                {lastUpdate && <span className=\"update\">&nbsp;{`(Updated: ${lastUpdate})`}</span>}\n              </div>\n              {tags.length && tags[0] !== 'undefined' && <span className=\"info-dot\">Â·</span>}\n              <ul className=\"tag-list\">{mapTag}</ul>\n            </div>\n            <Link to={slug}>\n              <span className=\"excerpt\">{excerpt}</span>\n            </Link>\n          </article>\n        </li>\n      );\n    });\n\n    setCurrentPostList((prev: JSX.Element[]) => {\n      return [...prev, ...mapToList];\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\n  }, [showCnt]);\n\n  useEffect(() => {\n    if (currentPostList.length) setCurrentPostList([]);\n\n    setShowCnt((prev: number) => {\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\n      return 10;\n    });\n\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, [sortedPosts]);\n\n  return (\n    <div className=\"post-list\">\n      <ul>{currentPostList}</ul>\n    </div>\n  );\n};\n\nexport default PostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\ninterface TagsPageProps {\n  data: any;\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState<string | undefined>();\n  const [currentPostList, setCurrentPostList] = useState([]);\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `${Number(fontSize) / 100 + 0.9}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\n    }\n    return [];\n  }, [targetTag]);\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined');\n\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\n    }\n    setLargeCount(large);\n  }, []);\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList());\n  }, [targetTag]);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"YYYY-MM-DD\")\n              update(formatString: \"YYYY-MM-DD\")\n              title\n              tags\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"sourceRoot":""}