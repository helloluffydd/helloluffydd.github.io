{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_23/","result":{"data":{"markdownRemark":{"html":"<p>講了那麼多的物件和函式，現在終於輪到不可或缺的邊緣人－陣列。</p>\n<!-- more -->\n<h3 id=\"陣列array\" style=\"position:relative;\"><a href=\"#%E9%99%A3%E5%88%97array\" aria-label=\"陣列array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>陣列（Array）</h3>\n<p>陣列屬於物件型別的次型別，又稱<strong>陣列物件</strong>，它的內容可以是<strong>任何東西的集合</strong>。</p>\n<p>也就是說，我在陣列裡面可以放任何的資料型別，包含字串、數字、布林、物件、函式物件、甚至另一個陣列。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'Bai'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola! '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5566</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mom</span><span class=\"token operator\">:</span> <span class=\"token string\">'Linda'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'Taipei'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isCute</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'Eat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Sleep'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Play Games'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>我們知道物件是 Name/Value Pairs 的集合，其實陣列物件也是同樣的道理，只是它用<strong>索引值（Index）</strong>取代了 Name。</p>\n<p>陣列的索引值由左至右從 <code class=\"language-text\">0</code> 開始，如果把上面的程式碼想像成陣列物件如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bai'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hola! '</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token number\">5566</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">mom</span><span class=\"token operator\">:</span> <span class=\"token string\">'Linda'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">city</span><span class=\"token operator\">:</span> <span class=\"token string\">'Taipei'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">isCute</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Eat'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Sleep'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Play Games'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>我們可以透過<strong>取用運算子 <code class=\"language-text\">[]</code></strong> 搭配索引值來取用物件內的資料。注意！<strong>物件的點運算子在陣列中是不能使用的</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">arr<span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token number\">4</span><span class=\"token punctuation\">.</span>mom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Unexpected number</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hola! Linda</span></code></pre></div>\n<hr>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<ul>\n<li>陣列屬於特殊的陣列物件，它可以是任何資料型別的集合。</li>\n<li>我們可以利用取用運算子 <code class=\"language-text\">[]</code> 搭配陣列索引值來取用陣列裡的資料。</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h3>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 4-38 </li>\n</ol>","excerpt":"講了那麼多的物件和函式，現在終於輪到不可或缺的邊緣人－陣列。","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_23/#%E9%99%A3%E5%88%97array\">陣列（Array）</a></li>\n<li><a href=\"/weird-JavaScript_23/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_23/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_23/"},"frontmatter":{"title":"Wierd JavaScript 23：陣列","date":"2019-08-17","update":"0001-01-01","tags":["JavaScript","Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_23/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-17"}},"staticQueryHashes":["2027115977"]}