{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_11/","result":{"data":{"markdownRemark":{"html":"<p>運算子就是用符號表示的函式。</p>\n<!-- more -->\n<h2 id=\"運算子operators\" style=\"position:relative;\"><a href=\"#%E9%81%8B%E7%AE%97%E5%AD%90operators\" aria-label=\"運算子operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>運算子（Operators）</h2>\n<hr>\n<blockquote>\n<p><strong>A special function</strong> that is syntactically (written) differently.\nGenerally operators take two parameters and return one result.</p>\n</blockquote>\n<p>如同其他程式語言，在 JavaScript 中，運算子是<strong>一種特殊的函式</strong>，透過特殊符號來描述，且往往<strong>需要至少兩個以上的參數（Parameters）</strong>進行運算，以回傳（return）一個運算的結果。</p>\n<p>以算術運算子中的 <code class=\"language-text\">+</code> 為例，請看下方程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">55</span> <span class=\"token operator\">+</span> <span class=\"token number\">66</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>大部分運算子使用的是<a href=\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">中綴（Infix）</a>表示法，意即用 <code class=\"language-text\">+</code> 串聯兩個所欲計算的參數 <code class=\"language-text\">55</code> 和 <code class=\"language-text\">66</code> 。</p>\n<p>這段程式碼如果用 JS function 語法來表示，就像這樣（注意！只是幫助理解，請不要執行）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">66</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>當然，也部分運算子包括所謂<a href=\"https://zh.wikipedia.org/wiki/%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">前綴（Prefix）</a>與<a href=\"https://zh.wikipedia.org/wiki/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E7%A4%BA%E6%B3%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">後綴（Postfix）</a>表示法。如下面這些範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Prefix</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 101</span>\n<span class=\"token comment\">// Postfix </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200</span></code></pre></div>\n<p>JavaScript 包含以下幾種功能的運算子：</p>\n<ul>\n<li>賦值運算子</li>\n<li>比較運算子</li>\n<li>算術運算子</li>\n<li>位元運算子（不常用）</li>\n<li>邏輯運算子</li>\n<li>條件運算子（又稱三元運算子）</li>\n<li>逗點運算子</li>\n<li>字串運算子</li>\n<li>一元運算子</li>\n<li>關係運算子</li>\n</ul>\n<p>大家有空可以點進連結細讀 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Expressions_and_Operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN 關於各種運算子的詳細介紹</a>。</p>\n<p>這裡我想簡單介紹幾種常見常用的運算子。</p>\n<h3 id=\"算術運算子arithmetic-operators\" style=\"position:relative;\"><a href=\"#%E7%AE%97%E8%A1%93%E9%81%8B%E7%AE%97%E5%AD%90arithmetic-operators\" aria-label=\"算術運算子arithmetic operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>算術運算子（Arithmetic operators）</h3>\n<p>算術運算子包括基本的數學運算方法，必須掌握的算術運算子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 加法</span>\n<span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 102</span>\n<span class=\"token comment\">// 減法</span>\n<span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 98</span>\n<span class=\"token comment\">// 乘法</span>\n<span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 200</span>\n<span class=\"token comment\">// 除法</span>\n<span class=\"token number\">100</span> <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 33.33333333...</span>\n<span class=\"token comment\">// 取餘數</span>\n<span class=\"token number\">100</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 指數</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 8</span>\n<span class=\"token comment\">// 增加（++）以及減少（--）：屬於一元運算子，根據前綴或後綴的表述方法會回傳不同結果。</span>\n<span class=\"token comment\">// 前綴增加／減少會回傳參數加／減 1 後的值：</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 101</span>\n<span class=\"token comment\">// 後綴增加／減少會將參數加／減 1 ，但回傳原本的值：</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<h3 id=\"賦值運算子assignment-operators\" style=\"position:relative;\"><a href=\"#%E8%B3%A6%E5%80%BC%E9%81%8B%E7%AE%97%E5%AD%90assignment-operators\" aria-label=\"賦值運算子assignment operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>賦值運算子（Assignment operators）</h3>\n<p>賦值運算子是<strong>將右方的參數賦予給左方</strong>，這個方向性很重要！</p>\n<p>賦值運算子可以結合算術方法，變成複合的賦值運算子。</p>\n<p>常見如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 單純賦值</span>\n<span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5566</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> x <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 加法賦值</span>\n<span class=\"token keyword\">var</span> k <span class=\"token operator\">+=</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等同於　k = k + 100 </span>\n<span class=\"token comment\">// 減法賦值</span>\n<span class=\"token keyword\">var</span> l <span class=\"token operator\">-=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 等同於　l = l - 200</span>\n<span class=\"token comment\">// 依此類推... </span></code></pre></div>\n<h3 id=\"比較運算子comparison-operators\" style=\"position:relative;\"><a href=\"#%E6%AF%94%E8%BC%83%E9%81%8B%E7%AE%97%E5%AD%90comparison-operators\" aria-label=\"比較運算子comparison operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>比較運算子（Comparison operators）</h3>\n<p>比較運算子會<strong>由左至右</strong>依序比較傳入的參數，並根據結果回傳布林值： <code class=\"language-text\">true</code> 或 <code class=\"language-text\">false</code>。</p>\n<p>如果比較的兩個參數資料型別不同，由於 JS 的動態型別特性，它會偷偷幫我們<strong>強制型轉（Coercion）</strong>後進行比較。</p>\n<p>除了常見的比較運算子，<strong>等於</strong>和<strong>嚴格等於</strong>值得一提：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 等於：比較兩個參數的數值是否相同？</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span> <span class=\"token operator\">==</span> <span class=\"token number\">55</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 嚴格等於：比較兩個參數的數值以及資料型態是否相同？</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">55</span> <span class=\"token operator\">===</span> <span class=\"token string\">'55'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span></code></pre></div>\n<p>實務上，我們會<strong>使用 <code class=\"language-text\">===</code> 來進行判斷</strong>，以避免 JS 偷偷幫我們強制型轉而產生紕漏。</p>\n<h3 id=\"邏輯運算子logical-operators\" style=\"position:relative;\"><a href=\"#%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90logical-operators\" aria-label=\"邏輯運算子logical operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>邏輯運算子（Logical operators）</h3>\n<p>邏輯運算子會<strong>由左至右</strong>判斷傳入的<strong>參數</strong>或<strong>運算式</strong>，並根據結果回傳一個<strong>其中一個參數</strong>，或<strong>布林值</strong>： <code class=\"language-text\">true</code> 或 <code class=\"language-text\">false</code>。</p>\n<p>邏輯運算子常被用在條件判斷，尤其是 <code class=\"language-text\">if</code> 陳述句：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 且（&amp;&amp;）：當參數為運算式，根據運算結果回傳布林值，若兩運算式結果皆為 true ，則回傳 true。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">8</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// 或（||）：當參數為運算式，根據運算結果回傳布林值，若兩運算式其中之一為 true ，即回傳 true。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> <span class=\"token number\">8</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// 非（!）：若參數轉換成布林值為 true，則回傳 false。</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token number\">5566</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">5566</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// true ；表示 5566 的布林值為 true</span>\n<span class=\"token comment\">// 用於 if 陳述：</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">6</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is TRUE!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// This is TRUE!</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is FALSE!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意！在 JS 中，<strong>應該避免同時三個值以上的多重判斷</strong>，尤其在 <code class=\"language-text\">if</code> 等條件陳述中，JS 強制型轉的特色可能會導致非預期的結果：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 尷尬的案例 ˊ_>ˋ</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is TRUE!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// This is TRUE!</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is FALSE!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以，在<strong>判斷多重條件時，請使用邏輯運算子</strong>確保嚴謹：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is TRUE!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is FALSE!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// This is FALSE!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<hr>\n<ul>\n<li>運算子是一種透過特殊符號來表述的函式。</li>\n</ul>\n<h2 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h2>\n<hr>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 3-21</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN：Expressions and operators</a></li>\n</ol>","excerpt":"運算子就是用符號表示的函式。","tableOfContents":"<ul>\n<li>\n<p><a href=\"/weird-JavaScript_11/#%E9%81%8B%E7%AE%97%E5%AD%90operators\">運算子（Operators）</a></p>\n<ul>\n<li><a href=\"/weird-JavaScript_11/#%E7%AE%97%E8%A1%93%E9%81%8B%E7%AE%97%E5%AD%90arithmetic-operators\">算術運算子（Arithmetic operators）</a></li>\n<li><a href=\"/weird-JavaScript_11/#%E8%B3%A6%E5%80%BC%E9%81%8B%E7%AE%97%E5%AD%90assignment-operators\">賦值運算子（Assignment operators）</a></li>\n<li><a href=\"/weird-JavaScript_11/#%E6%AF%94%E8%BC%83%E9%81%8B%E7%AE%97%E5%AD%90comparison-operators\">比較運算子（Comparison operators）</a></li>\n<li><a href=\"/weird-JavaScript_11/#%E9%82%8F%E8%BC%AF%E9%81%8B%E7%AE%97%E5%AD%90logical-operators\">邏輯運算子（Logical operators）</a></li>\n</ul>\n</li>\n<li><a href=\"/weird-JavaScript_11/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_11/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_11/"},"frontmatter":{"title":"Wierd JavaScript - 11：運算子","date":"2019-08-11","update":"0001-01-01","tags":["Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_11/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript - 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript - 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript - 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript - 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript - 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript - 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript - 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript - 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript - 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript - 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript - 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript - 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript - 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript - 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript - 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript - 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript - 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript - 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript - 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript - 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript - 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript - 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript - 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript - 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript - 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript - 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript - 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript - 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript - 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript - 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript - 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript - 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript - 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript - 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript - 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript - 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript - 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript - 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript - 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript - 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-11"}},"staticQueryHashes":["2027115977"]}