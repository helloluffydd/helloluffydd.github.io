{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_10/","result":{"data":{"markdownRemark":{"html":"<p>JavaScript 將資料分為基本型別與物件型別兩類，那麼 JS 內建的資料型別到底有幾種呢？</p>\n<!-- more -->\n<hr>\n<h3 id=\"資料型別data-type\" style=\"position:relative;\"><a href=\"#%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5data-type\" aria-label=\"資料型別data type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>資料型別（Data Type）</h3>\n<p>其實在 02 篇就已經大概介紹過，在 JavaScript 中，資料型別分為兩類：</p>\n<ol>\n<li>基本型別／原始型別（純值）</li>\n<li>物件型別（物件）</li>\n</ol>\n<p>也就是說，在 JS 中，所有的<strong>值（Value）</strong>都是<strong>純值</strong>或<strong>物件</strong>。</p>\n<p>更精闢一點地說，<strong>所有的值，都是物件</strong>。（這個概念比較進階，等到我們更深入瞭解物件後，就能理解。）</p>\n<p>這篇主要介紹這兩大資料型別。</p>\n<hr>\n<h3 id=\"基本型別primitive\" style=\"position:relative;\"><a href=\"#%E5%9F%BA%E6%9C%AC%E5%9E%8B%E5%88%A5primitive\" aria-label=\"基本型別primitive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>基本型別（Primitive）</h3>\n<p>{% colorquote info %}\nA type of data that represent <strong>a single value</strong>.(Not an object)\n{% endcolorquote %}</p>\n<p>基本型別，又稱<strong>原始型別</strong>，又細分為六種，每一種都是<strong>值（Value）</strong>，因此基本型別指的就是：<strong>「純值」</strong>。</p>\n<p>什麼意思？相較於<strong>物件</strong>作為 <strong>Name/Value 的集合體</strong>，基本型別就只有它這個<strong>值（Value）</strong>。</p>\n<p>而這六種值分別是：</p>\n<h4 id=\"字串string\" style=\"position:relative;\"><a href=\"#%E5%AD%97%E4%B8%B2string\" aria-label=\"字串string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字串（String）</h4>\n<p>{% colorquote info %}\na sequence of characters.\n{% endcolorquote %}</p>\n<p>用<strong>單引號（'Fei'）</strong>或<strong>雙引號（\"Fei\"）</strong>包覆的內容就屬於字串，如 <code class=\"language-text\">'Fei'</code> 、 <code class=\"language-text\">'5566'</code> 、 <code class=\"language-text\">\"True\"</code> 、 <code class=\"language-text\">'undefined'</code> 等等。</p>\n<p>注意！單引號與雙引號混用是不被接受的： <del><code class=\"language-text\">\"Fei'</code></del> 。</p>\n<p>我會推薦使用<strong>單引號（''）</strong>來表達字串，因為使用雙引號的話，如果字串內容遇到雙引號或其他特殊字元，就必須作<strong>跳脫字元（Escape Character）</strong>處理，單引號少有這樣的衝突。如下範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> noteA <span class=\"token operator\">=</span> <span class=\"token string\">'\"JavaScript\" is not equal to \"Java\"!!'</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> noteB <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>JavaScript<span class=\"token string\">\" is not equal to \"</span>Java<span class=\"token string\">\"!!\"</span> <span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>noteA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>　<span class=\"token comment\">// \"JavaScript\" is not equal to \"Java\"!!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>noteB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>　<span class=\"token comment\">// SyntaxError: Unexpected identifier</span>\n\n<span class=\"token comment\">// 利用反斜線（\\）跳脫字元後，noteB 即可執行：</span>\n<span class=\"token keyword\">var</span> noteB <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\"JavaScript\\\" is not equal to \\\"Java\\\"!!\"</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"數字number\" style=\"position:relative;\"><a href=\"#%E6%95%B8%E5%AD%97number\" aria-label=\"數字number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>數字（Number）</h4>\n<p>{% colorquote info %}\nfloating point number.\nUnlike other programming languages, there's only one 'number' type.\n{% endcolorquote %}</p>\n<p>和其他語言不同， JavaScript 的數字型別都屬於<strong>浮點數（Float）</strong>。</p>\n<p>除了常見的整數或小數，JS 還包含一些特別的數字：</p>\n<ul>\n<li><code class=\"language-text\">Infinity</code>（無限大）</li>\n<li><code class=\"language-text\">-Infinity</code>（無限小）</li>\n<li><code class=\"language-text\">NaN</code>（不是數字，Not a Number）</li>\n</ul>\n<p>任何正數除以 <code class=\"language-text\">0</code> 都會得到 <code class=\"language-text\">Infinity</code> ；反之，任何負數除以 <code class=\"language-text\">0</code> 都會得到 <code class=\"language-text\">-Infinity</code>。</p>\n<p><code class=\"language-text\">Infinity</code> 除以 <code class=\"language-text\">Infinity</code> 會得到 <code class=\"language-text\">NaN</code>。</p>\n<p><code class=\"language-text\">0</code> 除以 <code class=\"language-text\">0</code> 也會得到 <code class=\"language-text\">NaN</code>。</p>\n<p>其實，只要任何運算中出現 <code class=\"language-text\">NaN</code> ，結果都會是 <code class=\"language-text\">NaN</code>。</p>\n<p> <code class=\"language-text\">NaN</code> 甚至不等於自己，更別說等於任何數字。但是， <code class=\"language-text\">NaN</code> 還是屬於<strong>數字型別（Number）</strong>。</p>\n<p>如果你想判斷一個變數或值是不是 <code class=\"language-text\">NaN</code> ，可以用 <code class=\"language-text\">isNaN()</code> 來判斷。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaN'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// true ；因為 'NaN' 無法轉成其他數字。</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Number ；NaN 屬於數字型別（Number）。</span></code></pre></div>\n<p>回到數字型別本身，由於 JS 對 Number 的處理採用的是「<a href=\"https://zh.wikipedia.org/wiki/IEEE_754\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IEEE 754</a>」二進位浮點數算術標準，在運算上會出現極其微小的誤差，導致某些運算式的判斷會令人不解，經典案例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h4 id=\"布林值boolean\" style=\"position:relative;\"><a href=\"#%E5%B8%83%E6%9E%97%E5%80%BCboolean\" aria-label=\"布林值boolean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>布林值（Boolean）</h4>\n<p>{% colorquote info %}\ntrue or false\n{% endcolorquote %}</p>\n<p><del>斯斯有三種，但</del> Boolean 只有兩種值： <code class=\"language-text\">true</code>（是） 和 <code class=\"language-text\">false</code>（否）。</p>\n<p>Boolean 多被用來判斷運算式，藉此控制流程，決定要不要做某一件事，譬如 <code class=\"language-text\">if</code> ：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">55</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">66</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>　<span class=\"token comment\">// 55 > 66 不成立， a > b 會被轉成 false 代入 if，因此 if(false)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is LARGER than b.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 這段不會執行。</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is SMALLER than b.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 執行這段，印出 a is SMALLER than b.  </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 JavaScript 中，判斷或比較的運算式能夠被隱性轉型成 Boolean ，好比上面這段程式碼中的 <code class=\"language-text\"></code> ，詳細我們不久後就會提到。</p>\n<h4 id=\"空值null\" style=\"position:relative;\"><a href=\"#%E7%A9%BA%E5%80%BCnull\" aria-label=\"空值null permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>空值（Null）</h4>\n<p>{% colorquote info %}\nnull represents lack of exitence.\n{% endcolorquote %}</p>\n<p>Null 只有 <code class=\"language-text\">null</code> 這個值，指的是，該變數存在於 JS（記憶體） 中，<strong>已經被宣告，可能曾經有值，但現在沒有值</strong>。</p>\n<p>如果你不想讓一個變數有前述三種值，那麼將它設定為 <code class=\"language-text\">null</code> 是<strong>可以被接受的</strong>，因為在必要時，它會被 JS <strong>強制轉型</strong>成 <code class=\"language-text\">0</code> 進行運算。請看下方程式碼：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">5566</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> nul <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> und <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> nul<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5566</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> und<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN　ˊ&lt;_ˋ...??????</span></code></pre></div>\n<h4 id=\"未定義undefined\" style=\"position:relative;\"><a href=\"#%E6%9C%AA%E5%AE%9A%E7%BE%A9undefined\" aria-label=\"未定義undefined permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>未定義（Undefined）</h4>\n<p>{% colorquote info %}\nUndefined represents lack of existence.\n{% endcolorquote %}</p>\n<p>Undefined 只有 <code class=\"language-text\">undefined</code> 這個值，指的是，該變數存在於 JS（記憶體） 中，<strong>已經被宣告，但尚未被賦值</strong>。</p>\n<p>一個變數如果是 <code class=\"language-text\">undefined</code> ，代表變數沒有其他值（字串、數字、null等等），才會被賦值為 <code class=\"language-text\">undefined</code>。</p>\n<p>還記得 Hoisting 嗎？ JS 在 Hoisting 階段時，會先幫我們宣告變數並賦予 <code class=\"language-text\">undefined</code> ，等到它真正執行後，才真正賦值。</p>\n<p>我們可以說， <code class=\"language-text\">undefined</code> 是 JS 用來告訴我們<strong>變數未被賦值</strong>的狀況。</p>\n<p>注意！請不要將變數賦值為 <code class=\"language-text\">undefined</code>，因為它需要運算時，會被 JS <strong>強制轉型</strong> 為 <code class=\"language-text\">NaN</code> ，如上方範例。</p>\n<p>所以， <code class=\"language-text\">undefined</code> 真正的意涵，表示<strong>變數佔據記憶體位置</strong>，但是變數還沒有被賦予其它值。</p>\n<p>總結來說，對 JS 而言， <code class=\"language-text\">null</code> 與 <code class=\"language-text\">undefined</code> 具有<strong>值不存在</strong>的意思，但實際上兩者在功能與運算仍有差異，不然何必無緣無故設計兩種型別呢？</p>\n<h4 id=\"symboles6-新增的型別\" style=\"position:relative;\"><a href=\"#symboles6-%E6%96%B0%E5%A2%9E%E7%9A%84%E5%9E%8B%E5%88%A5\" aria-label=\"symboles6 新增的型別 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol（ES6 新增的型別）</h4>\n<p>{% colorquote info %}\nUsed in ES6. We won't talk about this here...\n{% endcolorquote %}</p>\n<p>ES6 後才新增的型別，因為不常見<del>（我也還不會用）</del>，這裡先不談。</p>\n<p>最後，在介紹物件型別之前，我要先簡單介紹一個很重要的觀念：</p>\n<p>在 JavaScript 中，<strong>基本型別（上述六種值）</strong>的變數賦值或拷貝（Copy）大部分是以<strong>傳值（by Value）</strong>的方式實現。</p>\n<p>聽不懂？沒關係，我們會再細談的。</p>\n<hr>\n<h3 id=\"物件型別object\" style=\"position:relative;\"><a href=\"#%E7%89%A9%E4%BB%B6%E5%9E%8B%E5%88%A5object\" aria-label=\"物件型別object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>物件型別（Object）</h3>\n<p>相較於基本型別有六種（純值），物件型別只有一種，就是<strong>物件（Object）</strong>。</p>\n<p>什麼是物件？我們說過，物件是<strong>Name/Value（鍵值配對） 的集合體</strong>，每一對 Name/Value 都是物件的<strong>屬性（Property）</strong>，其中， Value 可以是其他純值或物件。</p>\n<p>創造物件有很多種方式，最常見的是<strong>物件實字（Object Literal）</strong>，我們用程式碼來看會比較清楚：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Property: 一組 Name/Value ，其中 Value 是'Fei'（純值）</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Fei'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token comment\">// Property: 一組 Name/Value ，其中 Value 是一個物件。</span>\n  <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">dad</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jason'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mom</span><span class=\"token operator\">:</span> <span class=\"token string\">'Teresa'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>好，重點來了！物件型別只有一種，就是物件（Object），但它擁有<strong>次型別（subtype）</strong>，常見的有這兩個：</p>\n<ul>\n<li><strong>陣列（Array）</strong>，又稱為陣列物件。</li>\n<li><strong>函式（Function）</strong>，又稱為函式物件。</li>\n</ul>\n<p>當然還包括其他次型別物件，等我們有遇到再介紹。</p>\n<p>所以，物件內容其實可以很複雜：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Property: 一組 Name/Value ，其中 Value 是'Fei'（純值）</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Fei'</span><span class=\"token punctuation\">,</span> \n  <span class=\"token comment\">// Property: 一組 Name/Value ，其中 Value 是一個物件。</span>\n  <span class=\"token literal-property property\">family</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">dad</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jason'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mom</span><span class=\"token operator\">:</span> <span class=\"token string\">'Teresa'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">bro</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bai'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Property: 一組 Name/Value ，其中 Value 是一個陣列，因為陣列也屬於物件的一種。</span>\n  <span class=\"token literal-property property\">friends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Shiba'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'giraffe'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Fish'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Method: 一組 Name/Value ，其中 Value 是一個函式，因為函式也屬於物件的一種。</span>\n  <span class=\"token function-variable function\">say</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome to my blog!!'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>物件中的函式 ，我們稱之為物件的<strong>方法（Method）</strong>，既然是 function ，當然可以呼叫。</p>\n<p>使用<strong>點運算子（.）</strong>取用物件內的屬性或方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// Fei</span>\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Welcome to my blog!!'</span></code></pre></div>\n<p>之後我們會更深入探討陣列、函式與物件的關係。</p>\n<p>簡言之，物件擁有一組以上的<strong>屬性（Property）</strong>或<strong>方法（Method）</strong>，而屬性和方法也必然符合「鍵值配對」法則。</p>\n<p>最後，在進到結論之前，我要先簡單介紹一個很重要的觀念：</p>\n<p>在 JavaScript 中，<strong>物件型別（也就是物件這一種值）</strong>的變數賦值或拷貝（Copy）大部分是以<strong>傳參考（by Reference）</strong>的方式實現。</p>\n<p><strong>傳值（By Value）</strong>和<strong>傳參考（By Reference）</strong>是 JavaScript 處理資料的運作邏輯，也是它偷偷不告訴你的事情之一。</p>\n<hr>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<ul>\n<li>在 JS 中，所有的值（Value）都是純值或物件。</li>\n<li>JS 內建的資料型別分兩大類，分別是基本型別與物件型別。</li>\n<li>\n<p>基本型別（Primitive）有六種：</p>\n<ul>\n<li>字串（String）</li>\n<li>數字（Number）</li>\n<li>布林值（Boolean）</li>\n<li>空值（Null）</li>\n<li>未定義（Undefined）</li>\n<li>符號（Symbol，ES6 新增的型別）</li>\n</ul>\n</li>\n<li>物件型別（Object）只有一種，就是物件（Object）。</li>\n<li>物件型別包含陣列、函式等次型別，它們都屬於特殊的物件。</li>\n<li>所以，JS 內建的資料型別總共有 7 種：6 種純值 + 1 種物件。</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h3>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 3-20</li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10190873\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">重新認識 JavaScript: Day 03 變數與資料型別</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10190962\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">重新認識 JavaScript: Day 04 物件、陣列以及型別判斷</a></li>\n</ol>","excerpt":"JavaScript 將資料分為基本型別與物件型別兩類，那麼 JS 內建的資料型別到底有幾種呢？","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_10/#%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5data-type\">資料型別（Data Type）</a></li>\n<li><a href=\"/weird-JavaScript_10/#%E5%9F%BA%E6%9C%AC%E5%9E%8B%E5%88%A5primitive\">基本型別（Primitive）</a></li>\n<li><a href=\"/weird-JavaScript_10/#%E7%89%A9%E4%BB%B6%E5%9E%8B%E5%88%A5object\">物件型別（Object）</a></li>\n<li><a href=\"/weird-JavaScript_10/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_10/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_10/"},"frontmatter":{"title":"Wierd JavaScript 10：基本型別（純值）與物件型別","date":"2019-08-10","update":"0001-01-01","tags":["JavaScript","Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_10/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-08-10"}},"staticQueryHashes":["2027115977"]}