{"componentChunkName":"component---src-templates-post-tsx","path":"/weird-JavaScript_38/","result":{"data":{"markdownRemark":{"html":"<p>與其他程式語言不同，JavaScript 採用原型繼承的方式，將所有物件串聯起來！</p>\n<!-- more -->\n<h3 id=\"物件導向object-oriented\" style=\"position:relative;\"><a href=\"#%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91object-oriented\" aria-label=\"物件導向object oriented permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>物件導向（Object Oriented）</h3>\n<p>JavaScript 是屬於<strong>物件導向</strong>的程式語言。</p>\n<p>物件導向，指的是，在 JavaScript 中，<strong>物件</strong>被視為程式組成的基本單元，而且物件之間彼此都會透過<strong>繼承</strong>的方式互相連結，產生關係，以便資料互相傳遞、取用。</p>\n<hr>\n<h3 id=\"繼承inheritance\" style=\"position:relative;\"><a href=\"#%E7%B9%BC%E6%89%BFinheritance\" aria-label=\"繼承inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>繼承（Inheritance）</h3>\n<p>{% colorquote info %}\nOne object gets access to the properties and methods of another object.\n{% endcolorquote %}</p>\n<p>繼承，指的是<strong>一個物件取用另外一個物件的屬性或方法</strong>。</p>\n<p>假設我有兩個物件 <code class=\"language-text\">ObjA</code> 與 <code class=\"language-text\">ObjB</code> ， <code class=\"language-text\">ObjA</code> 繼承了 <code class=\"language-text\">ObjB</code> ，那麼，我就能在 <code class=\"language-text\">ObjA</code> 中取用 <code class=\"language-text\">ObjB</code> 的屬性與方法。</p>\n<p>也就是說，當我們創造一個物件時，JS 引擎其實已經將它與另外一個物件<strong>連起來</strong>，而這個連起來的機制，就是所謂的繼承。</p>\n<p>而繼承的方式，主要分為<strong>古典繼承</strong>與<strong>原型繼承</strong>兩類。</p>\n<hr>\n<h3 id=\"古典繼承classical-inheritance\" style=\"position:relative;\"><a href=\"#%E5%8F%A4%E5%85%B8%E7%B9%BC%E6%89%BFclassical-inheritance\" aria-label=\"古典繼承classical inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>古典繼承（Classical Inheritance）</h3>\n<p>古典繼承是當代非常主流而熱門的繼承方式， <strong>Java</strong> 、 <strong>C#</strong> 等程式語言都是採用古典繼承的設計機制。</p>\n<p>古典繼承的特點在於相當口語化（Verbose），而且有非常多的方法可以使用，譬如：</p>\n<ul>\n<li>Friend（夥伴）</li>\n<li>Protected（保護）</li>\n<li>Private（私用）</li>\n<li>Interface（介面）</li>\n</ul>\n<p>但古典繼承的弱勢在於，必須瞭解上述規範的方法，才能輕易使用它。</p>\n<p>除此之外，古典繼承採用樹狀結構的設計模式，當繼承物件數量增加時，很容易將物件集合成一個大熔爐，讓人搞不清楚內部物件詳細的連結方式。古典繼承好比一棟設計複雜的房子，當你想要換燈泡的時候，卻發現馬桶開始沖水，就好像，修改了 A 物件，卻非預期地影響了 B 物件。</p>\n<hr>\n<h3 id=\"原型繼承prototypal-inheritance\" style=\"position:relative;\"><a href=\"#%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BFprototypal-inheritance\" aria-label=\"原型繼承prototypal inheritance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>原型繼承（Prototypal Inheritance）</h3>\n<p>相較於古典繼承，原型繼承較簡單易懂（Easy to understand），且具備彈性（Flexible）、可延展（Extensible）等優勢。</p>\n<p>而 <strong>JavaScript</strong> 正是透過<strong>原型繼承</strong>的方式，將所有物件都串聯起來。</p>\n<p>往後幾篇會介紹 JS 的原型以及繼承機制。</p>\n<hr>\n<h3 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h3>\n<ul>\n<li>繼承，指的是一個物件取用另外一個物件的屬性或方法。</li>\n<li>JavaScript 屬於物件導向的程式語言，它透過原型繼承的方式，將所有物件都串聯起來。</li>\n</ul>\n<h3 id=\"參考資料\" style=\"position:relative;\"><a href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\" aria-label=\"參考資料 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>參考資料</h3>\n<ol>\n<li>JavaScript 全攻略：克服 JS 奇怪的部分 5-53</li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki：物件導向程式設計</a></li>\n</ol>","excerpt":"與其他程式語言不同，JavaScript 採用原型繼承的方式，將所有物件串聯起來！","tableOfContents":"<ul>\n<li><a href=\"/weird-JavaScript_38/#%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91object-oriented\">物件導向（Object Oriented）</a></li>\n<li><a href=\"/weird-JavaScript_38/#%E7%B9%BC%E6%89%BFinheritance\">繼承（Inheritance）</a></li>\n<li><a href=\"/weird-JavaScript_38/#%E5%8F%A4%E5%85%B8%E7%B9%BC%E6%89%BFclassical-inheritance\">古典繼承（Classical Inheritance）</a></li>\n<li><a href=\"/weird-JavaScript_38/#%E5%8E%9F%E5%9E%8B%E7%B9%BC%E6%89%BFprototypal-inheritance\">原型繼承（Prototypal Inheritance）</a></li>\n<li><a href=\"/weird-JavaScript_38/#%E7%B5%90%E8%AB%96\">結論</a></li>\n<li><a href=\"/weird-JavaScript_38/#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料</a></li>\n</ul>","fields":{"slug":"/weird-JavaScript_38/"},"frontmatter":{"title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","date":"2019-09-07","update":"0001-01-01","tags":["JavaScript","Wierd JavaScript"],"keywords":["Luffy on the Way","Luffy Chen"],"featuredImage":null}}},"pageContext":{"slug":"/weird-JavaScript_38/","series":[{"slug":"/weird-JavaScript_01/","title":"Wierd JavaScript 01：語法解析、詞彙環境、執行脈絡","num":1},{"slug":"/weird-JavaScript_02/","title":"Wierd JavaScript 02：Name / Value Pair 與物件","num":2},{"slug":"/weird-JavaScript_03/","title":"Wierd JavaScript 03：全域環境與全域物件","num":3},{"slug":"/weird-JavaScript_04/","title":"Wierd JavaScript 04：創造、提升與 undefined","num":4},{"slug":"/weird-JavaScript_05/","title":"Wierd JavaScript 05：單執行緒、同步執行、非同步回呼","num":5},{"slug":"/weird-JavaScript_06/","title":"Wierd JavaScript 06：呼叫函式、執行堆疊","num":6},{"slug":"/weird-JavaScript_07/","title":"Wierd JavaScript 07：變數環境與範圍鍊","num":7},{"slug":"/weird-JavaScript_08/","title":"Wierd JavaScript 08：作用域、let 與區塊作用域","num":8},{"slug":"/weird-JavaScript_09/","title":"Wierd JavaScript 09：動態型別","num":9},{"slug":"/weird-JavaScript_10/","title":"Wierd JavaScript 10：基本型別（純值）與物件型別","num":10},{"slug":"/weird-JavaScript_11/","title":"Wierd JavaScript 11：運算子","num":11},{"slug":"/weird-JavaScript_12/","title":"Wierd JavaScript 12：運算子的優先性與相依性","num":12},{"slug":"/weird-JavaScript_13/","title":"Wierd JavaScript 13：強制型轉","num":13},{"slug":"/weird-JavaScript_14/","title":"Wierd JavaScript 14：存在與布林、條件判斷與預設值","num":14},{"slug":"/weird-JavaScript_15/","title":"Wierd JavaScript 15：創造物件、物件實字","num":15},{"slug":"/weird-JavaScript_16/","title":"Wierd JavaScript 16：物件的屬性、方法以及取用","num":16},{"slug":"/weird-JavaScript_17/","title":"Wierd JavaScript 17：偽裝命名空間","num":17},{"slug":"/weird-JavaScript_18/","title":"Wierd JavaScript 18：JSON v.s. 物件","num":18},{"slug":"/weird-JavaScript_19/","title":"Wierd JavaScript 19：一級函式","num":19},{"slug":"/weird-JavaScript_20/","title":"Wierd JavaScript 20：函式陳述式與函式表達式","num":20},{"slug":"/weird-JavaScript_21/","title":"Wierd JavaScript 21：傳值 v.s. 傳參考","num":21},{"slug":"/weird-JavaScript_22/","title":"Wierd JavaScript 22：What's this ?","num":22},{"slug":"/weird-JavaScript_23/","title":"Wierd JavaScript 23：陣列","num":23},{"slug":"/weird-JavaScript_24/","title":"Wierd JavaScript 24：參數（parameter v.s. arguments）","num":24},{"slug":"/weird-JavaScript_25/","title":"Wierd JavaScript 25：重載函式","num":25},{"slug":"/weird-JavaScript_26/","title":"Wierd JavaScript 26：語法解析器","num":26},{"slug":"/weird-JavaScript_27/","title":"Wierd JavaScript 27：自動插入分號","num":27},{"slug":"/weird-JavaScript_28/","title":"Wierd JavaScript 28：空格","num":28},{"slug":"/weird-JavaScript_29/","title":"Wierd JavaScript 29：立即呼叫函式表達式（IIFEs）","num":29},{"slug":"/weird-JavaScript_30/","title":"Wierd JavaScript 30：IIFEs 與安全程式碼","num":30},{"slug":"/weird-JavaScript_31/","title":"Wierd JavaScript 31：閉包（1）","num":31},{"slug":"/weird-JavaScript_32/","title":"Wierd JavaScript 32：閉包（2）","num":32},{"slug":"/weird-JavaScript_33/","title":"Wierd JavaScript 33：函式工廠","num":33},{"slug":"/weird-JavaScript_34/","title":"Wierd JavaScript 34：閉包與回呼","num":34},{"slug":"/weird-JavaScript_35/","title":"Wierd JavaScript 35：call()、apply()、bind()","num":35},{"slug":"/weird-JavaScript_36/","title":"Wierd JavaScript 36：函式程式設計（一）","num":36},{"slug":"/weird-JavaScript_37/","title":"Wierd JavaScript 37：函式程式設計（二）","num":37},{"slug":"/weird-JavaScript_38/","title":"Wierd JavaScript 38：古典繼承 v.s. 原型繼承","num":38},{"slug":"/weird-JavaScript_39/","title":"Wierd JavaScript 39：原型與原型鍊","num":39},{"slug":"/weird-JavaScript_40/","title":"Wierd JavaScript 40：所有東西都是物件（或純值）","num":40}],"lastmod":"2019-09-07"}},"staticQueryHashes":["2027115977"]}